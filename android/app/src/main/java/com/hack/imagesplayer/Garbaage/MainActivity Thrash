
package com.hack.imagesplayer;

import android.annotation.SuppressLint;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.CancellationSignal;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.util.Pair;
import android.util.Size;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;

import com.bumptech.glide.Glide;
import com.bumptech.glide.request.target.SimpleTarget;
import com.bumptech.glide.request.transition.Transition;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.hack.imagesplayer.Models.Album;
import com.hack.imagesplayer.Models.ImageMeta;
import com.hack.imagesplayer.Util.ImageCropUtil;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;

import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;
import io.flutter.plugin.common.MethodChannel;

import static android.content.ContentValues.TAG;

public class MainActivity extends FlutterActivity {
    private static final String CHANNEL = "com.hack.imagesplayer/ImageGallery";
    private static final String EDITOR_CHANNEL = "com.hack.imagesplayer/ImageEditor";
    private static final String UTIL_CHANNEL = "com.hack.imagesplayer/Util";


    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {
        super.configureFlutterEngine(flutterEngine);
        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), EDITOR_CHANNEL).setMethodCallHandler((call, result) -> {
            if ("memoryToMemory".equals(call.method)) {
                addBorder(call.argument("image"), call.argument("size"), result);
            }
        });

        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), UTIL_CHANNEL).setMethodCallHandler((call, result) -> {
            if ("loadCompressedImage".equals(call.method)) {
                loadCompressedImage(this, call.argument("imagePath"), result);
            }
        });

        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)
                .setMethodCallHandler((call, result) -> {

                    switch (call.method) {
                        case "GetGallery":
                            getGallery(this, call.argument("albumId"), result);
                            break;
                        case "GetGalleryBuckets":
                            Toast.makeText(this, "Get Buckets 3", Toast.LENGTH_LONG).show();
                            getGalleryBuckets(this, result);
                            break;
                        case "GetGalleryImage":
                            getGalleryImage(call.argument("imageDirectory"), call.argument("displayName"), result);
                            break;
                        case "GetThumbImage":
                            getThumbImage(this, call.argument("thumbUri"), result);
                        case "cropImage":

                            if ("cropImage".equals(call.method)) {
                                String path = call.argument("path");
                                double scale = call.argument("scale");
                                double left = call.argument("left");
                                double top = call.argument("top");
                                double right = call.argument("right");
                                double bottom = call.argument("bottom");
                                RectF area = new RectF((float) left, (float) top, (float) right, (float) bottom);
                                ImageCropUtil imageCropUtil = new ImageCropUtil(path, (float) scale, left, top, right, bottom, this.getActivity());
                                imageCropUtil.cropImage(result);
                            }
                    }
                });
    }

    private void loadCompressedImage(Context context, String imagePath, MethodChannel.Result result) {
        File file = new File(imagePath);
        Glide
                .with(getApplicationContext())
                .asBitmap()
                .load(file)
                .into(new SimpleTarget<Bitmap>(150, 150) {
                    @Override
                    public void onResourceReady(@NonNull Bitmap bitmap, @Nullable Transition<? super Bitmap> transition) {
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
                        byte[] byteArray = stream.toByteArray();
                        result.success(byteArray);
                    }

                    @Override
                    public void onLoadFailed(@Nullable Drawable errorDrawable) {
                        super.onLoadFailed(errorDrawable);
                        result.success(null);
                    }
                });
    }

    private void addBorder(String imagePath, Double size, final MethodChannel.Result result) {

        File file = new File(imagePath);
        Glide
                .with(getApplicationContext())
                .asBitmap()
                .load(file)
                .into(new SimpleTarget<Bitmap>(150, 150) {
                    @Override
                    public void onResourceReady(@NonNull Bitmap bitmap, @Nullable Transition<? super Bitmap> transition) {

                        Bitmap newBitmap = Bitmap.createBitmap((int) (bitmap.getWidth() + size * 4), (int) (bitmap.getHeight() + size * 4), bitmap.getConfig());
                        Canvas canvas = new Canvas(newBitmap);
                        canvas.drawColor(Color.RED);
                        canvas.drawBitmap(bitmap, (int) (size * 2.0), (int) (size * 2.0), null);
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        newBitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
                        byte[] byteArray = stream.toByteArray();
                        newBitmap.recycle();
                        result.success(byteArray);
                    }

                    @Override
                    public void onLoadFailed(@Nullable Drawable errorDrawable) {
                        super.onLoadFailed(errorDrawable);
                        result.success(null);
                    }
                });
    }

    void getGalleryBuckets(Context context, MethodChannel.Result result) {
        GetGalleryBucketsTask getGalleryBucketsTask = new GetGalleryBucketsTask(context, result);
        getGalleryBucketsTask.execute();
    }

    private void getGallery(Context context, String albumId, MethodChannel.Result result) {
        Pair<MethodChannel.Result, String> params = new Pair<MethodChannel.Result, String>(result, albumId);
        GetGalleryTask loadImages = new GetGalleryTask(context, result);
        loadImages.execute(params);
    }

    private void getGalleryImage(String imageDirectory, String imageName, MethodChannel.Result result) {
        HashMap<String, String> res = new HashMap<>();
        String path = Environment.getExternalStorageDirectory() + "/" + imageDirectory + imageName;
        res.put("image", path);
        result.success(res);
    }

    private void getThumbImage(Context context, String thumbUri, MethodChannel.Result result) {
        GetThumbImage getThumbImage = new GetThumbImage(context, result);
        getThumbImage.execute(thumbUri);
    }
}

class GetThumbImage extends AsyncTask<String, Void, HashMap<String, byte[]>> {
    @SuppressLint("StaticFieldLeak")
    private final Context context;
    private final MethodChannel.Result result;

    GetThumbImage(Context ct, MethodChannel.Result rt) {
        context = ct;
        result = rt;
    }

    @Override
    protected void onPostExecute(HashMap<String, byte[]> stringHashMap) {
        super.onPostExecute(stringHashMap);
        result.success(stringHashMap);
    }

    @Override
    protected HashMap<String, byte[]> doInBackground(String... thumbUris) {
        HashMap<String, byte[]> res = new HashMap<>();

        Bitmap bitmap;
        try {
            bitmap = MediaStore.Images.Thumbnails.getThumbnail(
                    context.getContentResolver(), Long.parseLong(thumbUris[0]),
                    MediaStore.Images.Thumbnails.MICRO_KIND,
                    (BitmapFactory.Options) null);
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
            byte [] byteArray = stream.toByteArray();
            bitmap.recycle();
            res.put("thumbBytes", byteArray);

        } catch (Exception e) {
            Log.i(TAG, "Failed to fetch some Items GetThumbImage "+thumbUris[0]);
        }
        return res;
    }
}

class GetGalleryBucketsTask extends AsyncTask<Void, Void, HashMap<String, byte[]>> {
    private Context context;
    private final MethodChannel.Result result;

    GetGalleryBucketsTask(Context ct, MethodChannel.Result rt) {
        context = ct;
        result = rt;
    }

    @Override
    protected void onPostExecute(HashMap<String, byte[]> stringHashMap) {
        super.onPostExecute(stringHashMap);
        result.success(stringHashMap);
    }

    @Override
    protected HashMap<String, byte[]> doInBackground(Void... voids) {
        HashMap<String, byte[]> ret = new HashMap<>();
        HashMap<String, String> uniques = new HashMap<>();

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        String[] projection = null;
        String selection = "";
        String sortOrder = "";

        projection = new String[]{
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
                MediaStore.Images.Media.BUCKET_ID,
                (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q)?MediaStore.Images.Media.VOLUME_NAME:null,
                MediaStore.Images.Media._ID,
                MediaStore.Video.Media.DATE_ADDED,
                MediaStore.Images.Media.DISPLAY_NAME,
                MediaStore.Images.Media.DATA
        };
        sortOrder = MediaStore.Video.Media.DATE_ADDED + " DESC";

        Cursor cursor = contentResolver.query(
                uri, // Uri
                projection,
                selection,
                null,
                sortOrder
        );

        if (cursor == null) {
            Log.i(TAG, "doInBackground: Something Went Wrong.");
        } else if (!cursor.moveToFirst()) {
            Log.i(TAG, "doInBackground: No Images Found on SD Card.");
        } else if (cursor.getCount() > 0) {
            do {

                String bucketId;
                String bucketDisplayName;

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                    bucketId = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_ID));
                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));

                    if (bucketDisplayName != null && !uniques.containsKey(bucketDisplayName)) {
                        String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
                        String volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
                        String imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
                        Size size = new Size(100, 100);
                        Bitmap bitmap;
                        byte[] byteArray;
                        try {
                            CancellationSignal cancellationSignal = new CancellationSignal();
                            bitmap = context.getContentResolver().loadThumbnail(Uri.parse(imageUri + "/" + id), size, cancellationSignal);
                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
                            byteArray = stream.toByteArray();
                            bitmap.recycle();
                        } catch (IOException e) {
                            Log.i(TAG, "Failed to fetch some Items");
                            continue;
                        }

                        String count = getBucketImagesCount(context, bucketDisplayName);
                        JSONObject mJson = new JSONObject();
                        try {
                            mJson.put("albumId", bucketId);
                            mJson.put("albumName", bucketDisplayName);
                            mJson.put("count", count);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        ret.put(mJson.toString(), byteArray);
                        uniques.put(bucketDisplayName, "");
                    }
                } else {

                    bucketId = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.BUCKET_ID));
                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));

                    if (bucketDisplayName != null && !uniques.containsKey(bucketDisplayName)) {
                        String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));

                        Bitmap bitmap;
                        byte[] byteArray = null;

                        try {
                            bitmap = MediaStore.Images.Thumbnails.getThumbnail(
                                    context.getContentResolver(), Long.parseLong(id),
                                    MediaStore.Images.Thumbnails.MICRO_KIND,
                                    (BitmapFactory.Options) null);

                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
                            byteArray = stream.toByteArray();
                            bitmap.recycle();
                        } catch (Exception e) {
                            Log.i(TAG, "Failed to fetch some Items");
                        }
                        String count = getBucketImagesCount(context, bucketDisplayName);

                        JSONObject mJson = new JSONObject();
                        try {
                            mJson.put("albumId", bucketId);
                            mJson.put("albumName", bucketDisplayName);
                            mJson.put("count", count);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        ret.put(mJson.toString(), byteArray);
                        uniques.put(bucketDisplayName, "");
                    }
                }
            } while (cursor.moveToNext());
        }
        if (cursor != null) {
            cursor.close();
        }
        return ret;
    }

    private String getBucketImagesCount(Context context, String bucketDisplayName) {
        String ct = "0";
        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        Cursor cursor = null;
        String[] projection = null;
        String sortOrder;

        sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
        cursor = contentResolver.query(
                uri, // Uri
                null,
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
                new String[]{bucketDisplayName},
                sortOrder
        );
        if (cursor == null) {
            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
        } else if (!cursor.moveToFirst()) {
            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
        } else if (cursor.getCount() > 0) {
            ct = String.valueOf(cursor.getCount());
        }
        if (cursor != null) {
            cursor.close();
        }
        return ct;
    }
}

class GetGalleryTask extends AsyncTask<Pair<MethodChannel.Result, String>, Void, ArrayList<String>> {
    private final Context context;
    private final MethodChannel.Result result;

    GetGalleryTask(Context ct, MethodChannel.Result rt) {
        context = ct;
        result = rt;
    }

    @Override
    protected void onPostExecute(ArrayList<String> strings) {
        super.onPostExecute(strings);
        result.success(strings);
    }

    @SafeVarargs
    @Override
    protected final ArrayList<String> doInBackground(Pair<MethodChannel.Result, String>... pairs) {
        ArrayList<String> res = new ArrayList<>();

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        Cursor cursor;
        String[] projection;
        String sortOrder;

        sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
        projection = new String[]{
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
                MediaStore.Images.Media.BUCKET_ID,
                MediaStore.Images.Media.DATE_MODIFIED,
                MediaStore.Images.Media._ID,
                MediaStore.Video.Media.DATE_ADDED,
                MediaStore.Images.Media.DISPLAY_NAME,
                MediaStore.Images.Media.DATA
        };
        cursor = contentResolver.query(
                uri, // Uri
                projection,
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
                new String[]{pairs[0].second},
                sortOrder
        );

        if (cursor == null) {
            Log.i(TAG, "getGallery: Something Went Wrong.");
        } else if (!cursor.moveToFirst()) {
            Log.i(TAG, "getGallery: No Images Found on SD Card.");
        } else if (cursor.getCount() > 0) {
            do {
                try {
                    String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
                    String displayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME));
                    String dateAdded = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_MODIFIED));

                    String imageUri = id;
                    String bucketDisplayName;
                    String imageDirectory;

                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
                    imageDirectory = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA));
                    String imageThumbPath = id;

                    long date = Long.parseLong(dateAdded);
                    Date d = new Date(date * 1000L);
                    dateAdded = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.ENGLISH).format(d);
                    String imageStoragePath = imageDirectory;

                    JSONObject mJson = new JSONObject();
                    try {
                        mJson.put("id", id);
                        mJson.put("displayName", displayName);
                        mJson.put("bucketDisplayName", bucketDisplayName);
                        mJson.put("imageStoragePath", imageStoragePath);
                        mJson.put("imageDirectory", imageDirectory);
                        mJson.put("imageThumbPath", imageThumbPath);
                        mJson.put("dateAdded", dateAdded);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
//                    Log.i(TAG, "doInBackground: Result :"+mJson.toString());
                    res.add(mJson.toString());
                } catch (Exception e) {
                    Log.i(TAG, "doInBackground: " + e.getMessage());
                }
            } while (cursor.moveToNext());
        }

        if (cursor != null)
            cursor.close();
        return res;
    }
}

++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++

package com.hack.imagesplayer;

import android.annotation.SuppressLint;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.CancellationSignal;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.util.Pair;
import android.util.Size;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;

import com.bumptech.glide.Glide;
import com.bumptech.glide.request.target.SimpleTarget;
import com.bumptech.glide.request.transition.Transition;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.hack.imagesplayer.Models.Album;
import com.hack.imagesplayer.Models.ImageMeta;
import com.hack.imagesplayer.Util.ImageCropUtil;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;

import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;
import io.flutter.plugin.common.MethodChannel;

import static android.content.ContentValues.TAG;

@SuppressWarnings("ALL")
public class MainActivity extends FlutterActivity {
    private static final String CHANNEL = "com.hack.imagesplayer/ImageGallery";
    private static final String EDITOR_CHANNEL = "com.hack.imagesplayer/ImageEditor";
    private static final String UTIL_CHANNEL = "com.hack.imagesplayer/Util";


    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {
        super.configureFlutterEngine(flutterEngine);
        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), EDITOR_CHANNEL).setMethodCallHandler((call, result) -> {
            if ("memoryToMemory".equals(call.method)) {
                addBorder(call.argument("image"), call.argument("size"), result);
            }
        });

        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), UTIL_CHANNEL).setMethodCallHandler((call, result) -> {
            if ("loadCompressedImage".equals(call.method)) {
                loadCompressedImage(this, call.argument("imagePath"), result);
            }
        });

        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)
                .setMethodCallHandler((call, result) -> {
//                    Log.i(TAG, "configureFlutterEngine: " + "Method Call Received");
                    switch (call.method) {
                        case "GetGallery":
                            getGallery(this, call.argument("albumId"), result);
                            break;
                        case "GetGalleryBuckets":
                            Toast.makeText(this, "Get Buckets 3", Toast.LENGTH_LONG).show();
                            getGalleryBuckets(this, result);
                            break;
                        case "GetGalleryImage":
                            getGalleryImage(call.argument("imageDirectory"), call.argument("displayName"), result);
                            break;
                        case "GetThumbImage":
                            getThumbImage(this, call.argument("thumbUri"), result);
                        case "cropImage":
//                            Log.i(TAG, "configureFlutterEngine: " + " CropImage");
                            if ("cropImage".equals(call.method)) {
                                String path = call.argument("path");
                                double scale = call.argument("scale");
                                double left = call.argument("left");
                                double top = call.argument("top");
                                double right = call.argument("right");
                                double bottom = call.argument("bottom");
                                RectF area = new RectF((float) left, (float) top, (float) right, (float) bottom);
                                ImageCropUtil imageCropUtil = new ImageCropUtil(path, (float) scale, left, top, right, bottom, this.getActivity());
                                imageCropUtil.cropImage(result);
                            }
                    }
                });
    }

    private void loadCompressedImage(Context context, String imagePath, MethodChannel.Result result) {
        File file = new File(imagePath);
        Glide
                .with(getApplicationContext())
                .asBitmap()
                .load(file)
                .into(new SimpleTarget<Bitmap>(150, 150) {
                    @Override
                    public void onResourceReady(@NonNull Bitmap bitmap, @Nullable Transition<? super Bitmap> transition) {
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
                        byte[] byteArray = stream.toByteArray();
                        result.success(byteArray);
                    }

                    @Override
                    public void onLoadFailed(@Nullable Drawable errorDrawable) {
                        super.onLoadFailed(errorDrawable);
                        result.success(null);
                    }
                });
    }

    private void addBorder(String imagePath, Double size, final MethodChannel.Result result) {
//        Log.i(TAG, "addBorder: " + imagePath);
        File file = new File(imagePath);
        Glide
                .with(getApplicationContext())
                .asBitmap()
                .load(file)
                .into(new SimpleTarget<Bitmap>(150, 150) {
                    @Override
                    public void onResourceReady(@NonNull Bitmap bitmap, @Nullable Transition<? super Bitmap> transition) {
//                        Log.i(TAG, "onResourceReady: " + " Loaded");

                        Bitmap newBitmap = Bitmap.createBitmap((int) (bitmap.getWidth() + size * 4), (int) (bitmap.getHeight() + size * 4), bitmap.getConfig());
                        Canvas canvas = new Canvas(newBitmap);
                        canvas.drawColor(Color.RED);
                        canvas.drawBitmap(bitmap, (int) (size * 2.0), (int) (size * 2.0), null);
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        newBitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
                        byte[] byteArray = stream.toByteArray();
                        newBitmap.recycle();
                        result.success(byteArray);
                    }

                    @Override
                    public void onLoadFailed(@Nullable Drawable errorDrawable) {
                        super.onLoadFailed(errorDrawable);
                        result.success(null);
                    }
                });
    }

    void getGalleryBuckets(Context context, MethodChannel.Result result) {
        GetGalleryBucketsTask getGalleryBucketsTask = new GetGalleryBucketsTask(context, result);
//        getGalleryBucketsTask.execute();
        HashMap<String, byte[]> ret = new HashMap<>();
        HashMap<String, String> uniques = new HashMap<>();

        GsonBuilder builder = new GsonBuilder();
        builder.serializeNulls().setPrettyPrinting();
        Gson gson = builder.create();

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        String[] projection = null;
        String selection = "";
        String sortOrder = "";

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
            projection = new String[]{
                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
                    MediaStore.Images.Media.BUCKET_ID,
                    MediaStore.Images.Media.VOLUME_NAME,
                    MediaStore.Images.Media._ID,
                    MediaStore.Video.Media.DATE_ADDED,
                    MediaStore.Images.Media.DISPLAY_NAME,
                    MediaStore.Images.Media.DATA
            };
            sortOrder = MediaStore.Video.Media.DATE_ADDED + " DESC";
        }

        Cursor cursor = contentResolver.query(
                uri, // Uri
                projection,
                selection,
                null,
                sortOrder
        );

        if (cursor == null) {
            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
        } else if (!cursor.moveToFirst()) {
            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
        } else if (cursor.getCount() > 0) {
            do {

                String bucketId;
                String bucketDisplayName;

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                    bucketId = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_ID));
                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));

                    if (bucketDisplayName != null && !uniques.containsKey(bucketDisplayName)) {
                        String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
                        String volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
                        String imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
                        Size size = new Size(100, 100);
                        Bitmap bitmap;
                        byte[] byteArray;
                        try {
                            CancellationSignal cancellationSignal = new CancellationSignal();
                            bitmap = context.getContentResolver().loadThumbnail(Uri.parse(imageUri + "/" + id), size, cancellationSignal);
                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
                            byteArray = stream.toByteArray();
                            bitmap.recycle();
                        } catch (IOException e) {
                            Log.i(TAG, "Failed to fetch some Items");
                            continue;
                        }

                        String count = getBucketImagesCount(context, bucketDisplayName);
                        Album albumBucket = new Album(bucketId, bucketDisplayName, count);
                        JSONObject  mJson = new JSONObject();
                        try {
                            mJson.put("albumId", bucketId);
                            mJson.put("albumName", bucketDisplayName);
                            mJson.put("count", count);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        ret.put(mJson.toString(), byteArray);
                        Toast.makeText(context, gson.toJson(albumBucket), Toast.LENGTH_SHORT).show();
//                        ret.put(gson.toJson(albumBucket), byteArray);
                        uniques.put(bucketDisplayName, "");
                    }
                } else {

                    bucketId = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.BUCKET_ID));
                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));

                    if (bucketDisplayName != null && !uniques.containsKey(bucketDisplayName)) {
                        String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));

                        Uri imageUri = null;
                        try {
                            imageUri = Uri.withAppendedPath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id);
                        } catch (Exception e) {
                            Log.i(TAG, "getGalleryBuckets: " + "Error Loading Uri");
                            continue;
                        }
                        Point size = new Point(100, 100);
                        Bitmap bitmap;
                        byte[] byteArray = null;

                        try {
                            bitmap = MediaStore.Images.Thumbnails.getThumbnail(
                                    getContentResolver(), Long.parseLong(id),
                                    MediaStore.Images.Thumbnails.MICRO_KIND,
                                    (BitmapFactory.Options) null);

                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
                            byteArray = stream.toByteArray();
                            bitmap.recycle();
                        } catch (Exception e) {
                            Log.i(TAG, "Failed to fetch some Items");
                        }
                        String count = getBucketImagesCount(context, bucketDisplayName);
                        Album albumBucket = new Album(bucketId, bucketDisplayName, count);
                        JSONObject  mJson = new JSONObject();
                        try {
                            mJson.put("albumId", bucketId);
                            mJson.put("albumName", bucketDisplayName);
                            mJson.put("count", count);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        ret.put(mJson.toString(), byteArray);
                        Toast.makeText(context, gson.toJson(albumBucket), Toast.LENGTH_SHORT).show();
//                        ret.put(gson.toJson(albumBucket), byteArray);
                        uniques.put(bucketDisplayName, "");
                    }
                }
            } while (cursor.moveToNext());
        }
        if (cursor != null) {
            cursor.close();
        }
        Toast.makeText(context, "Loaded " + uniques.size(), Toast.LENGTH_LONG).show();
        result.success(ret);

    }

    private String getBucketImagesCount(Context context, String bucketDisplayName) {
        String ct = "0";
        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        Cursor cursor = null;
        String[] projection = null;
        String sortOrder;
        projection = null;

        sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
        projection = new String[]{
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
                MediaStore.Images.Media.BUCKET_ID,
                MediaStore.Images.Media.DATE_MODIFIED,
//                MediaStore.Images.Media.VOLUME_NAME,
                MediaStore.Images.Media._ID,
                MediaStore.Video.Media.DATE_ADDED,
                MediaStore.Images.Media.DISPLAY_NAME,
                MediaStore.Images.Media.DATA
        };
        cursor = contentResolver.query(
                uri, // Uri
                projection,
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
                new String[]{bucketDisplayName},
                sortOrder
        );

        if (cursor == null) {
            Toast.makeText(context, "Something Went Wrong. 1", Toast.LENGTH_LONG).show();
        } else if (!cursor.moveToFirst()) {
            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
        } else if (cursor.getCount() > 0) {
            ct = String.valueOf(cursor.getCount());
        }
        if (cursor != null) {
            cursor.close();
        }
        Toast.makeText(context, "Count "+bucketDisplayName+" "+ct, Toast.LENGTH_LONG).show();
        return ct;
    }

    private void getGallery(Context context, String albumId, MethodChannel.Result result) {
        Pair<MethodChannel.Result, String> params = new Pair<MethodChannel.Result, String>(result, albumId);
        GetGalleryTask loadImages = new GetGalleryTask(context, result);
//        loadImages.execute(params);


        Log.i(TAG, "doInBackground: " + albumId);
        ArrayList<String> res = new ArrayList<>();
        Gson gson = new Gson();

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        Cursor cursor = null;
        String[] projection = null;
        String sortOrder;
        projection = null;

        sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
        projection = new String[]{
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
                MediaStore.Images.Media.BUCKET_ID,
                MediaStore.Images.Media.DATE_MODIFIED,
//                MediaStore.Images.Media.VOLUME_NAME,
                MediaStore.Images.Media._ID,
                MediaStore.Video.Media.DATE_ADDED,
                MediaStore.Images.Media.DISPLAY_NAME,
                MediaStore.Images.Media.DATA
        };
        cursor = contentResolver.query(
                uri, // Uri
                projection,
                MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
                new String[]{albumId},
                sortOrder
        );

        if (cursor == null) {
            Toast.makeText(context, "Something Went Wrong. 1", Toast.LENGTH_LONG).show();
        } else if (!cursor.moveToFirst()) {
            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
        } else if (cursor.getCount() > 0) {
            do {
                try {
                    String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
                    String displayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME));
                    String dateAdded = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_MODIFIED));

                    String imageUri = id;
                    String bucketDisplayName;
                    String volumeName;
                    String imageDirectory;


                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
                    try {
//                        imageUri = Uri.withAppendedPath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id);
                    } catch (Exception e) {
                        Log.i(TAG, "getGalleryBuckets: " + "Error Loading Uri");
                        continue;
                    }
//                    volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
//                    imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
                    imageDirectory = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA));
//                      imageDirectory = "";
//                    String imageThumbPath = imageUri + "/" + id;

                    long date = Long.parseLong(dateAdded);
                    Date d = new Date(date * 1000L);
                    dateAdded = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.ENGLISH).format(d);
                    String imageStoragePath = Environment.getExternalStorageDirectory() + "/" + imageDirectory + displayName;

                    ImageMeta imageMeta = new ImageMeta(id, displayName, bucketDisplayName, imageStoragePath, imageDirectory, imageUri.toString(), dateAdded);
                    res.add(gson.toJson(imageMeta));
//                    Toast.makeText(context, gson.toJson(imageMeta), Toast.LENGTH_SHORT).show();
                } catch (Exception e) {
                    Log.i(TAG, "doInBackground: " + e.getMessage());
                }
            } while (cursor.moveToNext());
        }

        if (cursor != null)
            cursor.close();

        result.success(res);
    }

    private void getGalleryImage(String imageDirectory, String imageName, MethodChannel.Result result) {
        HashMap<String, String> res = new HashMap<>();
        String path = Environment.getExternalStorageDirectory() + "/" + imageDirectory + imageName;
        res.put("image", path);
        result.success(res);
    }

    private void getThumbImage(Context context, String thumbUri, MethodChannel.Result result) {
        GetThumbImage getThumbImage = new GetThumbImage(context, result);
        getThumbImage.execute(thumbUri);
    }
}

class GetThumbImage extends AsyncTask<String, Void, HashMap<String, byte[]>> {
    @SuppressLint("StaticFieldLeak")
    private final Context context;
    private final MethodChannel.Result result;

    GetThumbImage(Context ct, MethodChannel.Result rt) {
        context = ct;
        result = rt;
    }

    @Override
    protected void onPostExecute(HashMap<String, byte[]> stringHashMap) {
        super.onPostExecute(stringHashMap);
        result.success(stringHashMap);
    }

    @Override
    protected HashMap<String, byte[]> doInBackground(String... thumbUris) {
        HashMap<String, byte[]> res = new HashMap<>();


        Bitmap bitmap;
        try {
            bitmap = MediaStore.Images.Thumbnails.getThumbnail(
                    context.getContentResolver(), Long.parseLong(thumbUris[0]),
                    MediaStore.Images.Thumbnails.MICRO_KIND,
                    (BitmapFactory.Options) null);
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            if (bitmap != null) {
                bitmap.compress(Bitmap.CompressFormat.PNG, 10, stream);
                byte[] byteArray = stream.toByteArray();
                bitmap.recycle();
                res.put("thumbBytes", byteArray);
            }
        } catch (Exception e) {
            Log.i(TAG, "Failed to fetch some Items");
        }

//        Bitmap bitmap = null;
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
//            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                Size size = new Size(70, 70);
//                try {
//                    CancellationSignal cancellationSignal = new CancellationSignal();
//                    bitmap = context.getContentResolver().loadThumbnail(Uri.parse(thumbUris[0]), size, cancellationSignal);
//                } catch (IOException e) {
////                    e.printStackTrace();
//                }
//            }
//        }
//
//        ByteArrayOutputStream stream = new ByteArrayOutputStream();
//        if (bitmap != null) {
//            bitmap.compress(Bitmap.CompressFormat.PNG, 10, stream);
//            byte[] byteArray = stream.toByteArray();
//            bitmap.recycle();
//            res.put("thumbBytes", byteArray);
//        }
        return res;
    }
}

class GetGalleryBucketsTask extends AsyncTask<Void, Void, HashMap<String, byte[]>> {
    private Context context;
    private final MethodChannel.Result result;

    GetGalleryBucketsTask(Context ct, MethodChannel.Result rt) {
        context = ct;
        result = rt;
    }

    @Override
    protected void onPostExecute(HashMap<String, byte[]> stringHashMap) {
        super.onPostExecute(stringHashMap);
        result.success(stringHashMap);
    }

    @Override
    protected HashMap<String, byte[]> doInBackground(Void... voids) {
        HashMap<String, byte[]> ret = new HashMap<>();
        HashMap<String, String> uniques = new HashMap<>();
        Gson gson = new Gson();

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        String[] projection = null;
        String selection = "";
        String sortOrder = "";

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
            projection = new String[]{
                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
                    MediaStore.Images.Media.BUCKET_ID,
                    MediaStore.Images.Media.VOLUME_NAME,
                    MediaStore.Images.Media._ID,
                    MediaStore.Video.Media.DATE_ADDED,
            };
            sortOrder = MediaStore.Video.Media.DATE_ADDED + " DESC";
        }

        Cursor cursor = contentResolver.query(
                uri, // Uri
                projection,
                selection,
                null,
                sortOrder
        );

        if (cursor == null) {
            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
        } else if (!cursor.moveToFirst()) {
            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
        } else if (cursor.getCount() > 0) {
            do {

                String bucketId;
                String bucketDisplayName;

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                    bucketId = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_ID));
                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
//                    Log.i(TAG, "getGalleryBuckets: " + bucketDisplayName + uniques.containsKey(bucketDisplayName));
                    // Get Thumbnail for this bucket
                    if (bucketDisplayName != null && !uniques.containsKey(bucketDisplayName)) {
                        String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
                        String volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
                        String imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
                        Size size = new Size(100, 100);
                        Bitmap bitmap;
                        byte[] byteArray;
                        try {
                            CancellationSignal cancellationSignal = new CancellationSignal();
                            bitmap = context.getContentResolver().loadThumbnail(Uri.parse(imageUri + "/" + id), size, cancellationSignal);
                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
                            byteArray = stream.toByteArray();
                            bitmap.recycle();
                        } catch (IOException e) {
//                            e.printStackTrace();
//                            Log.i(TAG, "Failed to fetch some Items");
                            continue;
                        }

                        String count = getBucketImagesCount(context, bucketDisplayName);
                        Album albumBucket = new Album(bucketId, bucketDisplayName, count);
                        ret.put(gson.toJson(albumBucket), byteArray);
                        uniques.put(bucketDisplayName, "");
                    }
                }
            } while (cursor.moveToNext());
        }
        if (cursor != null) {
            cursor.close();
        }
        return ret;
    }

    private String getBucketImagesCount(Context context, String bucketDisplayName) {
        String ct = "0";
        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        Cursor cursor = null;
        String[] projection = null;
        String sortOrder;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
            cursor = contentResolver.query(
                    uri, // Uri
                    null,
                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
                    new String[]{bucketDisplayName},
                    sortOrder
            );
        }
        if (cursor == null) {
            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
        } else if (!cursor.moveToFirst()) {
            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
        } else if (cursor.getCount() > 0) {
            ct = String.valueOf(cursor.getCount());
        }
        if (cursor != null) {
            cursor.close();
        }
        return ct;
    }
}

class GetGalleryTask extends AsyncTask<Pair<MethodChannel.Result, String>, Void, ArrayList<String>> {
    private final Context context;
    private final MethodChannel.Result result;

    GetGalleryTask(Context ct, MethodChannel.Result rt) {
        context = ct;
        result = rt;
    }

    @Override
    protected void onPostExecute(ArrayList<String> strings) {
        super.onPostExecute(strings);
        result.success(strings);
    }

    @SafeVarargs
    @Override
    protected final ArrayList<String> doInBackground(Pair<MethodChannel.Result, String>... pairs) {
        Log.i(TAG, "doInBackground: " + pairs[0].second);
        ArrayList<String> res = new ArrayList<>();
        Gson gson = new Gson();

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        Cursor cursor = null;
        String[] projection = null;
        String sortOrder;

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
            cursor = contentResolver.query(
                    uri, // Uri
                    projection,
                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
                    new String[]{pairs[0].second},
                    sortOrder
            );
        }

        if (cursor == null) {
            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
        } else if (!cursor.moveToFirst()) {
            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
        } else if (cursor.getCount() > 0) {
            do {
                try {
                    String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
                    String displayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME));
                    String dateAdded = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_MODIFIED));

                    String imageUri;
                    String bucketDisplayName;
                    String volumeName;
                    String imageDirectory;

                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
                    volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
                    imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
                    imageDirectory = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.RELATIVE_PATH));

                    String imageThumbPath = imageUri + "/" + id;

                    long date = Long.parseLong(dateAdded);
                    Date d = new Date(date * 1000L);
                    dateAdded = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.ENGLISH).format(d);
                    String imageStoragePath = Environment.getExternalStorageDirectory() + "/" + imageDirectory + displayName;

                    ImageMeta imageMeta = new ImageMeta(id, displayName, bucketDisplayName, imageStoragePath, imageDirectory, imageThumbPath, dateAdded);
                    res.add(gson.toJson(imageMeta));
                } catch (Exception e) {
                    Log.i(TAG, "doInBackground: " + e.getMessage());
                }
            } while (cursor.moveToNext());
        }

        if (cursor != null)
            cursor.close();
        return res;
    }
}
//    void getGalleryBuckets(Context context, MethodChannel.Result result) {
//        GetGalleryBucketsTask getGalleryBucketsTask = new GetGalleryBucketsTask(context, result);
////        getGalleryBucketsTask.execute();
//
////        if (result != null) return;
//
//        HashMap<String, byte[]> ret = new HashMap<>();
//        HashMap<String, String> uniques = new HashMap<>();
//
//        GsonBuilder builder = new GsonBuilder();
//        builder.serializeNulls().setPrettyPrinting();
//        Gson gson = builder.create();
//
//        ContentResolver contentResolver = context.getContentResolver();
//        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
//        String[] projection = null;
//        String selection = "";
//        String sortOrder = "";
//
//        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
//            projection = new String[]{
//                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
//                    MediaStore.Images.Media.BUCKET_ID,
//                    MediaStore.Images.Media.VOLUME_NAME,
//                    MediaStore.Images.Media._ID,
//                    MediaStore.Video.Media.DATE_ADDED,
//                    MediaStore.Images.Media.DISPLAY_NAME,
//                    MediaStore.Images.Media.DATA
//            };
//            sortOrder = MediaStore.Video.Media.DATE_ADDED + " DESC";
//        }
//
//        Cursor cursor = contentResolver.query(
//                uri, // Uri
//                projection,
//                selection,
//                null,
//                sortOrder
//        );
//
//        if (cursor == null) {
//            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
//        } else if (!cursor.moveToFirst()) {
//            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
//        } else if (cursor.getCount() > 0) {
//            do {
//
//                String bucketId;
//                String bucketDisplayName;
//
////                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
////                    bucketId = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_ID));
////                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
//////                    Log.i(TAG, "getGalleryBuckets: " + bucketDisplayName + uniques.containsKey(bucketDisplayName));
////                    // Get Thumbnail for this bucket
////
//////                    Toast.makeText(context, "Get Buckets",Toast.LENGTH_LONG).show();
////
////                    if (bucketDisplayName != null && !uniques.containsKey(bucketDisplayName)) {
////                        String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
////                        String volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
////                        String imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
////                        Size size = new Size(100, 100);
////                        Bitmap bitmap;
////                        byte[] byteArray;
////                        try {
////                            CancellationSignal cancellationSignal = new CancellationSignal();
////                            bitmap = context.getContentResolver().loadThumbnail(Uri.parse(imageUri + "/" + id), size, cancellationSignal);
////                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
////                            bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
////                            byteArray = stream.toByteArray();
////                            bitmap.recycle();
////                        } catch (IOException e) {
//////                            e.printStackTrace();
//////                            Log.i(TAG, "Failed to fetch some Items");
////                            continue;
////                        }
////
////                        String count = getBucketImagesCount(context, bucketDisplayName);
////                        Album albumBucket = new Album(bucketId, bucketDisplayName, count);
////                        ret.put(gson.toJson(albumBucket), byteArray);
////                        uniques.put(bucketDisplayName, "");
////                    }
////                } else {
////                    DISPLAY_NAME
////                    DATA
//                bucketId = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.BUCKET_ID));
//                bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
//
////                    Log.i(TAG, "getGalleryBuckets: " + bucketDisplayName + uniques.containsKey(bucketDisplayName));
//                // Get Thumbnail for this bucket
//
//                if (bucketDisplayName != null && !uniques.containsKey(bucketDisplayName)) {
//                    String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
//
////                    String volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
//                    Uri imageUri= null;
//                    try {
//                        imageUri = Uri.withAppendedPath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id);
////                        imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
//                    } catch (Exception e) {
//                        Log.i(TAG, "getGalleryBuckets: " + "Error Loading Uri");
//                    }
//                    Point size = new Point(100, 100);
//                    Bitmap bitmap;
//                    byte[] byteArray = null;
////                    Log.i(TAG, "doInBackground: " + volumeName + " " + id + " " + bucketId + " " + bucketDisplayName);
////                    try {
////                        bitmap = MediaStore.Images.Media.getBitmap(
////                                contentResolver,
////                                imageUri
////                        );
//                    bitmap = MediaStore.Images.Thumbnails.getThumbnail(
//                            getContentResolver(), Long.parseLong(id),
//                            MediaStore.Images.Thumbnails.MICRO_KIND,
//                            (BitmapFactory.Options) null );
//                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
//                    bitmap.compress(Bitmap.CompressFormat.PNG, 40, stream);
//                    byteArray = stream.toByteArray();
//                    bitmap.recycle();
////                    } catch (IOException e) {
////                        e.printStackTrace();
////                        Log.i(TAG, "Failed to fetch some Items");
////                        continue;
////                    }
//
//                    String count = getBucketImagesCount(context, bucketDisplayName);
//                    Album albumBucket = new Album(bucketId, bucketDisplayName, count);
//                    JSONObject mJson = new JSONObject();
//                    try {
//                        mJson.put("albumId", bucketId);
//                        mJson.put("albumName", bucketDisplayName);
//                        mJson.put("count", count);
//                    } catch (JSONException e) {
//                        e.printStackTrace();
//                        Toast.makeText(context, e.toString(), Toast.LENGTH_SHORT).show();
//                    }
//                    ret.put(mJson.toString(), byteArray);
//                    uniques.put(bucketDisplayName, "");
////                    Toast.makeText(context, bucketId.toString() + " " + bucketDisplayName + " " + id + " " + volumeName + " " + imageUri + " " + count, Toast.LENGTH_SHORT).show();
//                    Toast.makeText(context, mJson.toString(), Toast.LENGTH_SHORT).show();
//                    //                    }
//
//                }
//            } while (cursor.moveToNext());
//        }
//        if (cursor != null) {
//            cursor.close();
//        }
//        Toast.makeText(context, "Loaded " + uniques.size(), Toast.LENGTH_LONG).show();
//        result.success(ret);
//
//    }

//    @RequiresApi(api = Build.VERSION_CODES.Q)
//    private HashMap<String, String> getGallery(Context context, String albumId) {
//
//        HashMap<String, String> res = new LinkedHashMap<>();
//        ContentResolver contentResolver = context.getContentResolver();
//        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
//        Cursor cursor = null;
//        String[] projection = null;
//        String sortOrder;
//
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//            sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
//            cursor = contentResolver.query(
//                    uri, // Uri
//                    projection,
//                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
//                    new String[]{albumId},
//                    sortOrder
//            );
//        }
//
//        if (cursor == null) {
//            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
//        } else if (!cursor.moveToFirst()) {
//            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
//        } else if (cursor.getCount() > 0) {
//            do {
//                try {
//                    String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
//                    String displayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME));
//                    String dateAdded = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_MODIFIED));
//
//                    String imageUri;
//                    String bucketDisplayName;
//                    String volumeName;
//                    String imageDirectory;
//
//                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
//                    volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
//                    imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
//                    imageDirectory = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.RELATIVE_PATH));
//
////                    int thumbId = cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Images.ImageColumns._ID));
////                    Uri thumbImageUri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, thumbId);
////                    String imageThumbPath = thumbImageUri.toString();
//                    String imageThumbPath = imageUri + "/" + id;
////                    ContentResolver contentResolver1 = getContentResolver();
////                    String[] projection1 = {MediaStore.MediaColumns.DATA};
////                    Cursor cursor1 = contentResolver1.query(Uri.parse(imageThumbPath), projection1, null, null, null);
////                    if(cursor1!=null){
////                        if(cursor1.moveToFirst()){
////                            if(new File(cursor1.getString(0)).exists())
////                            {
////                                long date = Long.parseLong(dateAdded);
////                                Date d  = new Date(date*1000L);
////                                dateAdded = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.ENGLISH).format(d);
////                                String imageStoragePath = Environment.getExternalStorageDirectory() + "/" + imageDirectory + displayName;
////                                res.put("'{" + id + "}'{" + displayName + "}'{" + bucketDisplayName + "}'{" + imageStoragePath + "}'{" + imageDirectory + "}'{" + dateAdded + "}'", imageThumbPath);
////                            }
////                        }
////                    }
////                    cursor1.close();
//                    long date = Long.parseLong(dateAdded);
//                    Date d = new Date(date * 1000L);
//                    dateAdded = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.ENGLISH).format(d);
//                    String imageStoragePath = Environment.getExternalStorageDirectory() + "/" + imageDirectory + displayName;
//
////                  ("'{" + id + "}'{" + displayName + "}'{" + bucketDisplayName + "}'{" + imageStoragePath + "}'{" + imageDirectory + "}'{" + dateAdded + "}'", imageThumbPath);
////                    Log.i(TAG, "getGallery: " + id + ", " + displayName + ", " + bucketDisplayName + ", " + volumeName + ", " + imageUri + ", " + imageDirectory + ", " + dateAdded);
//                    res.put("'{" + id + "}'{" + displayName + "}'{" + bucketDisplayName + "}'{" + imageStoragePath + "}'{" + imageDirectory + "}'{" + dateAdded + "}'", imageThumbPath);
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//
//            } while (cursor.moveToNext());
//        }
//
//        if (cursor != null) {
//            cursor.close();
//        }
//        return res;
//    }

//    @RequiresApi(api = Build.VERSION_CODES.Q)
//    private HashMap<String, byte[]> getGallery(Context context, MethodChannel.Result result, String albumId, int lastFetched) {
//
//        HashMap<String, byte[]> res = new LinkedHashMap<String, byte[]>();
//        ContentResolver contentResolver = context.getContentResolver();
//        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
//        Cursor cursor = null;
//        String[] projection = null;
//        String sortOrder = "";
//
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//            sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " DESC";
//            cursor = contentResolver.query(
//                    uri, // Uri
//                    projection,
//                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ? ",
//                    new String[]{albumId},
//                    sortOrder
//            );
//        }
//
//        if (cursor == null) {
//            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
//        } else if (!cursor.moveToFirst()) {
//            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
//        } else if (cursor.getCount() > 0) {
//            try {
//                cursor.moveToPosition(lastFetched);
//            } catch (Exception e) {
//                e.printStackTrace();
//                return new HashMap<String, byte[]>();
//            }
//            do {
//                try {
//
//
//                    String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
//                    String displayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME));
//                    String dateAdded = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_MODIFIED));
//
//                    String imageUri = "";
//                    String bucketDisplayName = "";
//                    String volumeName = "";
//                    String imageDirectory = "";
//                    Bitmap bitmap = null;
//                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
//                    volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
//                    imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
//                    imageDirectory = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.RELATIVE_PATH));
//                    Size size = null;
//                    size = new Size(100, 100);
//                    try {
//                        bitmap = getContentResolver().loadThumbnail(Uri.parse(imageUri + "/" + id), size, cancellationSignal);
//                    } catch (IOException e) {
//                        e.printStackTrace();
//                    }
//                    Log.i(TAG, "getGallery: " + id + ", " + displayName + ", " + bucketDisplayName + ", " + volumeName + ", " + imageUri + ", " + imageDirectory + ", " + dateAdded);
//
//                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
//                    assert bitmap != null;
//                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
//                    byte[] byteArray = stream.toByteArray();
//                    bitmap.recycle();
//
//                    // id $  displayName $ bucketDisplayName $ volumeName $ imageDirectory
//                    long date = Long.parseLong(dateAdded);
//                    Date d  = new Date(date*1000L);
//                    dateAdded = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.ENGLISH).format(d);
//                    Log.d("MyApp", "DATE: "+ dateAdded);
//
//                    String imageStoragePath = Environment.getExternalStorageDirectory() + "/" + imageDirectory + displayName;
//                    res.put("'{" + id + "}'{" + displayName + "}'{" + bucketDisplayName + "}'{" + imageStoragePath + "}'{" + imageDirectory + "}'{" + dateAdded + "}'", byteArray);
//                } catch (Exception e) {
//                    e.printStackTrace();
//
//                }
//                if (res.size() > 30)
//                    break;
//            }while (cursor.moveToNext());
//        }
//
//        if (cursor != null) {
//            cursor.close();
//        }
//        return res;
//    }
//
//    CancellationSignal cancellationSignal = new CancellationSignal();
//
//    private HashMap<String, String> getGalleryImage(Context context, MethodChannel.Result result, String imageDirectory, String imageName) {
//        HashMap<String, String> res = new HashMap<String, String>();
//        String path = Environment.getExternalStorageDirectory() + "/" + imageDirectory + imageName;
//        res.put("image",path);
//        return res;
//    }


//    public class LoadImageTask extends AsyncTask<String, Integer, Bitmap> {
//        @Override
//        protected Bitmap doInBackground(String... strings) {
//            Bitmap bitmap = null;
//            File imageFile = new File(strings[0]);
//            bitmap = BitmapFactory.decodeFile(imageFile.getAbsolutePath());
//            return bitmap;
//        }
//
//        @Override
//        protected void onProgressUpdate(Integer... values) {
//            Toast.makeText(getApplicationContext(), values[0].toString(), Toast.LENGTH_LONG).show();
//            super.onProgressUpdate(values);
//        }
//
//        @Override
//        protected void onCancelled() {
//            Toast.makeText(getContext(), "Failed", Toast.LENGTH_LONG).show();
//            super.onCancelled();
//        }
//
//        @Override
//        protected void onPostExecute(Bitmap bitmap) {
//            super.onPostExecute(bitmap);
//            Toast.makeText(getApplicationContext(), "Image Loaded Successfully", Toast.LENGTH_LONG).show();
//            HashMap<String, byte[]> res = new HashMap<String, byte[]>();
//            ByteArrayOutputStream stream = new ByteArrayOutputStream();
//            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
//            byte[] byteArray = stream.toByteArray();
//            bitmap.recycle();
//            LoadImageTask task = new LoadImageTask();
//            res.put("Image", byteArray);
//            loadResult.success(res);
//        }
//    }


//    private ArrayList<String> getGallery(Context context) {
//
//        ArrayList<String> res = new ArrayList<>();
//        ContentResolver contentResolver = context.getContentResolver();
//        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
//        Cursor cursor = contentResolver.query(
//                uri, // Uri
//                null,
//                null,
//                null,
//                null
//        );
//
//        if (cursor == null) {
//            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
//        } else if (!cursor.moveToFirst()) {
//            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
//        } else if (cursor.getCount() > 0) {
//            while (cursor.moveToNext()) {
//                String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
//                String displayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME));
//                String imageUri = "";
//                String bucketDisplayName = "";
//                String volumeName = "";
//                String imageDirectory = "";
//                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
//                    volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
//                    imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
//                    imageDirectory = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.RELATIVE_PATH));
//                }
//               Log.i(TAG, "getGallery: "+ id +", "+ displayName +", "+ bucketDisplayName +", "+ volumeName +", "+ imageUri +", "+ imageDirectory);
//               res.add((imageUri + "/" + id));
//            }
//        }
//
//        if (cursor != null) {
//            cursor.close();
//        }
//        return res;
//    }
//}

//
//    private ArrayList<byte[]> getGallery(Context context, MethodChannel.Result result) {
//
//        ArrayList<byte[]> res = new ArrayList<>();
//        ContentResolver contentResolver = context.getContentResolver();
//        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
//        Cursor cursor = contentResolver.query(
//                uri, // Uri
//                null,
//                null,
//                null,
//                null
//        );
//
//        if (cursor == null) {
//            Toast.makeText(context, "Something Went Wrong.", Toast.LENGTH_LONG).show();
//        } else if (!cursor.moveToFirst()) {
//            Toast.makeText(context, "No Images Found on SD Card.", Toast.LENGTH_LONG).show();
//        } else if (cursor.getCount() > 0) {
//            try {
//                cursor.moveToPosition(lastFetched);
//            } catch (Exception e) {
//                e.printStackTrace();
//                return new ArrayList<>();
//            }
//            while (cursor.moveToNext()) {
//                String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));
//                String displayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME));
//                String imageUri = "";
//                String bucketDisplayName = "";
//                String volumeName = "";
//                String imageDirectory = "";
//                Bitmap bitmap = null;
//                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                    bucketDisplayName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));
//                    volumeName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.VOLUME_NAME));
//                    imageUri = MediaStore.Images.Media.getContentUri(volumeName).toString();
//                    imageDirectory = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.RELATIVE_PATH));
//                }
//                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
//                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                        Size size = new Size(80, 80);
//                        try {
//                            bitmap = getContentResolver().loadThumbnail(Uri.parse(imageUri + "/" + id), size, cancellationSignal);
//                        } catch (IOException e) {
//                            e.printStackTrace();
//                        }
//                    }
//                }
//                Log.i(TAG, "getGallery: " + id + ", " + displayName + ", " + bucketDisplayName + ", " + volumeName + ", " + imageUri + ", " + imageDirectory);
//
//                ByteArrayOutputStream stream = new ByteArrayOutputStream();
//                assert bitmap != null;
//                bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
//                byte[] byteArray = stream.toByteArray();
//                bitmap.recycle();
//                res.add(byteArray);
//                if (res.size() > 30) {
//                    lastFetched += 30;
//                    break;
//                }
//            }
//        }
//
//        if (cursor != null) {
//            cursor.close();
//        }
//        return res;
//    }
//
//    CancellationSignal cancellationSignal = new CancellationSignal();
//}
